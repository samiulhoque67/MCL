@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="OwnerProperIdentityCtrl">

    <div class="box-header with-border">
        <div class="row">
            <div class="col-lg-8">
                <i class="fa  fa-table"></i>
                <h3 class="box-title">Update Document</h3>
            </div>
        </div>

    </div>

<div class="box-body">
    <input type="hidden" ng-model="docPropIdentityModel.DocumentID" />
    <div class="row">
        <div class="col-sm-2 col-md-2 col-lg-2">
            <div class="form-group">
                <label>Owner Level</label>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <div class="form-group">
                <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                        ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels
                        track by ownerLevel.OwnerLevelID">
                    <option value="">--Select--</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2 col-md-2 col-lg-2">
            <div class="form-group">
                <label>Owner from one</label>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <div class="form-group">
                <select class="form-control" ng-model="docPropIdentityModel.Owner"
                        data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID"
                        data-ng-disabled="!docPropIdentityModel.OwnerLevel">
                    <option value="">----Select----</option>
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2 col-md-2 col-lg-2">
            <div class="form-group">
                <label>Document Category list11111</label>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <div class="form-group">
                <select class="form-control" data-ng-model="docPropIdentityModel.DocCategory"
                        data-ng-options="docCategory as docCategory.DocCategoryName for docCategory in
                         docCategoriesForSpecificOwner track by docCategory.DocCategoryID"
                        data-ng-disabled="!docPropIdentityModel.Owner">
                    <option value="">--Select--</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2 col-md-2 col-lg-2">
            <div class="form-group">
                <label>Document Type list</label>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <div class="form-group">
                <select class="form-control" data-ng-model="docPropIdentityModel.DocType"
                        data-ng-options="docType as docType.DocTypeName for docType in
                         docTypeForSpecificDocCategory track by docType.DocTypeID"
                        data-ng-disabled="!docPropIdentityModel.DocCategory">
                    <option value="">--Select--</option>
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2 col-md-2 col-lg-2">
            <div class="form-group">
                <label>Documents</label>
            </div>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <select class="form-control" data-ng-model="docPropIdentityModel.DocProperty"
                    data-ng-options="docProperty as docProperty.DocPropertyName for docProperty in
                         docPropertyForSpecificDocType track by docProperty.DocPropertyID"
                    data-ng-disabled="!docPropIdentityModel.DocType">
                <option value="">--Select--</option>
            </select>
        </div>

        <div class="col-sm-2 col-md-2 col-lg-2">
            <label>Search By</label>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <select data-ng-model="docPropIdentityModel.SearchBy"
                    class="form-control" data-ng-disabled="!docPropIdentityModel.DocProperty">
                <option value="">--Select--</option>
                <option value="1">Required Attribute</option>
                <option value="0">Optional Attribute</option>
            </select>

        </div>
    </div>

<div class="row">
    <div class="col-md-10">
        <h3><label>Attributes</label></h3>
    </div>
</div>

<div class="row">

        <div ng-repeat="item in DocumentsAttributeList" class="col-md-6">
            <div class="row">
                <div class="col-md-4">
                    <label>{{item.IdentificationAttribute}}</label>
                </div>
                <div class="col-md-8">
                    <input type="text" id="{{item.DocPropIdentifyID}}" />

                </div>
            </div>
        </div>
    </div>





    <br/>

    <div class="row">
        <table st-table="GridDisplayCollection" st-safe-src="docPropIdentityGridData"
               class="table table-condensed table-bordered table-striped table-hover">
            <thead>
            <tr>
                <th st-sort="DocPropertyName">Document Name</th>
                <th st-sort="DocPropIdentifyName">Identificaiton Attribute</th>
                <th st-sort="MetaValue">Attribute Value</th>
                <th st-sort="FileServerURL" class="hidden">FileServerURL</th>
                <th st-sort="">Action</th>
            </tr>
            <tr>

                <th colspan="3">
                    <input st-search=""
                           placeholder="Document Search" class="input-sm form-control" type="search"/>
                </th>

            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="row in GridDisplayCollection">
                <td class="hidden">{{row.DocMetaID}}</td>
                <td class="hidden">{{row.DocumentID}}</td>
                <td class="col-lg-2">{{row.DocPropertyName}}</td>
                <td class="col-lg-3">{{row.DocPropIdentifyName}}</td>
                <td class="col-lg-3">{{row.MetaValue}}</td>
                <td class="hidden">{{row.FileServerURL}}</td>
                <td class="col-lg-4">
                    <button type="button" class="btn btn-xs btn-success btn-flat" data-ng-click="SelectImage(row)" style="display: inline-block;"><i class="fa fa-list"></i>Select</button>
                </td>
            </tr>
            </tbody>
            <tfoot>
            <tr>
                <td colspan="6" class="text-center">
                    <div st-pagination="" st-items-by-page="itemsByPage"></div>
                </td>
            </tr>
            </tfoot>
        </table>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <label>Process Documents: </label>

            <button class="btn btnc1 btn-app btn-flat btnScan" ng-click="AcquireImage();">
                <i class="fa fa-print"></i> Scan
            </button>
            <a class="btn btnc2 btn-app btn-flat btnLoad" ng-click="LoadImage()">
                <i class="fa fa-inbox"></i> Load
            </a>
            <a class="btn btnc2 btn-app btn-flat btnRotate" ng-click="RotateRight()">
                <i class="fa fa-rotate-right"></i> Rotate
            </a>
            <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="ShowMoveImageDiv()">
                <i class="fa fa-reorder"></i> Move Image
            </a>
            <a class="btn btnc3 btn-app btn-flat btnRemove" ng-click="RemoveAllSelectedImages()">
                <i class="fa fa-remove"></i> Remove
            </a>
          
        </div>
    </div>
    <div class="row">
        <div id="MoveImage" class="row hidden">
            <div class="col-lg-2"></div>
            <div class="col-lg-10">
                <label>Which Image</label><input type="text" id="WhichImage"/>
                <label>Where</label><input type="text" id="Where"/>
                <button class="btn btn-primary btn-flat btn-sm" ng-click="MoveImage()">Move</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div id="dwtHorizontalThumbnil"></div>
        </div>
    </div>

    <div class="box-footer with-border">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <button type="button" id="btnSave" class="btn btn-lg btn-primary btn-flat pull-right btnSave" data-ng-click="ShowConfirmModal()"><i class="fa fa-save"></i> Save</button>
            </div>
        </div>
    </div>



</div>


    <div id="viewerModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                    <h3 class="modal-title">Image Viewer</h3>
                </div>

                <div class="modal-body">
                    <div class="box-body">
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                        <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>

                        <div id="dwtLargeViewer" class="box-body"></div>
                    </div>
                </div>

                <div class="modal-footer">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="mydiv" data-ng-show="loading">
        <div class="overlay">
            <div class="loder">
                <img src="~/Content/AdminLTE/img/cube.gif" /> <span class="text-bold">Loading...</span>
            </div>
        </div>
    </div>

    <div id="ConfirmSave" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title">Are You Sure?</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <h4>You Want to Upload the Documents?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="" class="btn btn-danger" ng-disabled="loading" data-ng-click="SaveImage()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>

<script type="text/javascript">

    app.controller('OwnerProperIdentityCtrl', function ($scope, $http) {
        applySecurity();

        $scope.ShowConfirmModal = function () {

            $('#ConfirmSave').modal('show');
        };

        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        
        var zoomFactor = .5;

        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtHorizontalThumbnil');

            DWObject.SetViewMode(4, -1);
            DWObject.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
            DWObject.JPEGQuality = 20;
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;
            DWObject.RegisterEvent('OnMouseDoubleClick', $scope.updateLargeViewer);
            DWObject.RegisterEvent('OnImageAreaSelected', function (sImageIndex, left, top, right, bottom) {
                DWObject.Erase(sImageIndex, left, top, right, bottom);
            });
            


            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;
        };

        $scope.ResetImageViewrs = function () {
            DWObject.RemoveAllImages();
            DWObjectLargeViewer.RemoveAllImages();
        }

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };


        $scope.ShowAttributes = 0;

        $scope.SelectImage = function (tableRow, e) {


            $scope.docPropIdentityModel.DocumentID = tableRow.DocumentID;

            $scope.docPropIdentityModelOriginal = angular.copy($scope.docPropIdentityModel);
            $scope.OriginalDocURL = (tableRow.FileServerURL +
                "//" + tableRow.DocumentID + ".pdf");

            $scope.OriginalFileServerURL = tableRow.FileServerURL;

            DWObject.IfShowFileDialog = false;
            DWObject.RemoveAllImages();

            DWObject.FTPPort = tableRow.ServerPort;
            DWObject.FTPUserName = tableRow.FtpUserName;
            DWObject.FTPPassword = tableRow.FtpPassword;

            DWObject.FTPDownload(tableRow.ServerIP, (tableRow.FileServerURL +
                "//" + tableRow.DocumentID + ".pdf"));


            $scope.ShowAttributes = 1;
        };


        $scope.AcquireImage = function () {
            if (DWObject) {
                DWObject.IfAutomaticDeskew = true;
                DWObject.IfAutoDiscardBlankpages = false;
                DWObject.AcquireImage();
            }
        };
        $scope.LoadImage = function () {
            DWObject.IfShowFileDialog = true;

            //DWObject.RemoveAllImages();
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_ALL);
        };

        $scope.RemoveAllSelectedImages = function () {
            DWObject.RemoveAllSelectedImages();
        }

        $scope.RotateRight = function () {
            DWObject.RotateRight(DWObject.GetSelectedImageIndex(0));
        }

        $scope.ShowMoveImageDiv = function () {
            $("#MoveImage").toggleClass("hidden");
        }
        $scope.MoveImage = function () {
            DWObject.MoveImage(($("#WhichImage").val() - 1), ($("#Where").val() - 1));
            $("#MoveImage").toggleClass("hidden");
        };

        

        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
            $('#viewerModal').modal('show');
        };

        

        $scope.itemsByPage = 10;
        $scope.loading = true;


        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                $scope.docPropIdentityModel.OwnerLevel = "";
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });


        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.Owner = "";
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                

                $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                    { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                    .success(function (response) {
                        $scope.ownersForSpecificOwnerLevel = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                
                
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocCategory', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                
                
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocType', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                

                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                        //$scope.BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.$watch('docPropIdentityModel.DocProperty', function (newVal) {
            if (newVal && $scope.ShowAttributes ==1) {
                $http.post('/DocScanningModule/DocModification/GetDocPropIdentityForSpecificDocType',
            {

                _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID,
                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
            })
                .success(function (response) {
                    $scope.DocumentsAttributeList = response;

                    var number = response.length;
                    setTimeout(function () {
                        for (var i = 0; i < number; i++) {
                            $("#" + response[i].DocMetaID).val(response[i].MetaValue);
                        };
                    }, 0);

                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });
            
            }
        });

        $scope.$watch('docPropIdentityModel.SearchBy', function (newVal) {
            if (newVal) {

                $scope.BindDataToGrid();
                $scope.ResetImageViewrs();

            }
        });

        $scope.BindDataToGrid = function () {
            $http.post('/DocScanningModule/OriginalDocSearching/GetDocPropIdentityForSelectedDocTypes',
            {
                _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID,
                _DocPropertyID: $scope.docPropIdentityModel.DocProperty.DocPropertyID,
                _SearchBy: $scope.docPropIdentityModel.SearchBy
            })
            .success(function (response) {
                $scope.docPropIdentityGridData = response;
                $scope.GridDisplayCollection = response;
                $scope.loading = false;
            }).error(function () {
                $scope.loading = false;
            });

        };

        var DocMetaValues = {
            MetaValue: "",
            DocPropIdentifyID: ""
        };

        $scope.docPropIdentityModel = {
            DocumentID: "",
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            SearchBy: "",
            SearchFor: "",
            Status: "",
            DocMetaValues: []
        };


        $scope.SaveImage = function () {
            
            $('#ConfirmSave').modal('hide');
            $scope.loading = true;

            angular.forEach($scope.DocumentsAttributeList, function (item) {

                DocMetaValues.DocPropIdentifyID = item.DocPropIdentifyID;
                DocMetaValues.MetaValue = $("#" + item.DocPropIdentifyID).val();

                $scope.docPropIdentityModel.DocMetaValues.push(DocMetaValues);

                DocMetaValues = {
                    MetaValue: "",
                    DocPropIdentifyID: ""
                };

            });

            $http.post('/DocScanningModule/DocModification/UpdateDocumentInfo',
                {
                    _modelDocumentsInfo: $scope.docPropIdentityModel
                })
                .success(function (response) {
                    DWObject.IfShowFileDialog = false;

                    var strFTPServer = response.result[0].ServerIP;
                    DWObject.FTPPort = response.result[0].ServerPort;
                    DWObject.FTPUserName = response.result[0].FtpUserName;
                    DWObject.FTPPassword = response.result[0].FtpPassword;

                    var isSave = DWObject.FTPUploadAllAsPDF(strFTPServer,
                        response.result[0].FileServerUrl + "//" +
                        response.result[0].DocumentID + ".pdf");

                    if (isSave) {
                        $scope.loading = false;
                        toastr.success("Upload Successful");
                        $scope.BindDataToGrid();
                        $scope.ResetImageViewrs();

                        if (response.result[0].FileServerUrl === $scope.OriginalFileServerURL) {
                            alert("Don't Delete");
                        } else {
                            $http.post('/DocScanningModule/DocModification/DeleteFtpDocuments',
                                {
                                    serverIP: response.result[0].ServerIP,
                                    uri: $scope.OriginalDocURL,
                                    userName: response.result[0].FtpUserName,
                                    password: response.result[0].FtpPassword
                                })
                                .success(function(response) {
                                    console.log(response);
                                })
                                .error(function(response) {
                                    console.log(response);
                                });
                        }

                       

                    } else {
                        //Take Document Info back to previous stage!

                    }

                })
                .error(function () {
                    $scope.loading = false;
                    toastr.success("Failed to Update Meta Data.");
                });
        };


        $scope.toggleRefreshTable = function (row) {
            $scope.loading = true;
            $scope.loading = false;
        };


    });

    app.directive('editInPlace', function () {
        return {
            restrict: 'E',
            scope: { value: '=' },
            template: '<input ng-model="value"></input>',
            link: function ($scope, element, attrs) {
                // Let's get a reference to the input element, as we'll want to reference it.
                var inputElement = angular.element(element.children()[1]);

                // This directive should have a set class so we can style it.
                element.addClass('edit-in-place');

                // Initially, we're not editing.
                $scope.editing = false;

                // ng-click handler to activate edit-in-place
                $scope.edit = function () {
                    $scope.editing = true;

                    // We control display through a class on the directive itself. See the CSS.
                    element.addClass('active');

                    // And we must focus the element.
                    // `angular.element()` provides a chainable array, like jQuery so to access a native DOM function,
                    // we have to reference the first element in the array.
                    inputElement[0].focus();
                };

                // When we leave the input, we're done editing.
                inputElement.prop('onblur', function () {
                    $scope.editing = false;
                    element.removeClass('active');
                });
            }
        };
    });

</script>



