
@{
    Layout = "~/Views/Shared/_AdminLteLayout.cshtml";
}

<div class="box box-primary box-body" ng-controller="OwnerProperIdentityCtrl">
   
    <div class="box-header with-border">
        <i class="fa  fa-table"></i>
        <h3 class="box-title">Document Scanning</h3>
        @*<input type="button" value="Test" ng-click="Test()" />*@
        <div class="box-tools pull-right">
            <button type="button" id="btnRefresh" data-ng-click="toggleRefreshTable()" class="btn btn-default btn-flat pull-right" ng-disabled="loading"><i class="fa fa-refresh"></i> Refresh</button>
        </div>
    </div>
   
    <div class="box-body">
        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner Level</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.OwnerLevel"
                            ng-options="ownerLevel as ownerLevel.LevelName for ownerLevel in ownerLevels
                        track by ownerLevel.OwnerLevelID">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Owner</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" ng-model="docPropIdentityModel.Owner"
                            data-ng-options="owner as owner.OwnerName for owner in ownersForSpecificOwnerLevel track by owner.OwnerID"
                            data-ng-disabled="!docPropIdentityModel.OwnerLevel">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Category</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="docPropIdentityModel.DocCategory"
                            data-ng-options="docCategory as docCategory.DocCategoryName for docCategory in
                         docCategoriesForSpecificOwner track by docCategory.DocCategoryID"
                            data-ng-disabled="!docPropIdentityModel.Owner">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Document Type</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <div class="form-group">
                    <select class="form-control" data-ng-model="docPropIdentityModel.DocType"
                            data-ng-options="docType as docType.DocTypeName for docType in
                         docTypeForSpecificDocCategory track by docType.DocTypeID"
                            data-ng-disabled="!docPropIdentityModel.DocCategory">
                        <option value="">--Select--</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-2 col-md-2 col-lg-2">
                <div class="form-group">
                    <label>Documents</label>
                </div>
            </div>
            <div class="col-sm-4 col-md-4 col-lg-4">
                <input type="button" class="btn btn-flat btn-primary" value="Select All" ng-click="SelectAll()" />
                <input type="button" class="btn btn-flat btn-primary" value="Unselect All" ng-click="UnSelectAll()" />
                <div ng-repeat="docProperty in docPropertyForSpecificDocType">
                    <input type="checkbox" name="DocProperty" ng-model="docProperty.IsSelected"
                           ng-change="BindDataToGrid()"/> {{docProperty.DocPropertyName}}
                </div>
            </div>
        </div>
        <br />

        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 table-responsive">
                <table st-table="GridDisplayCollection" st-safe-src="docPropIdentityGridData"
                       class="table table-condensed table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th st-sort="DocPropertyName">Documents</th>
                            <th st-sort="IdentificationAttribute">Identificaiton Attribute</th>
                            <th st-sort="MetaValue">Search Value</th>
                            <th st-sort="Remarks">Remarks</th>
                            <th st-sort="IsRequired">Is Required</th>
                        </tr>
                        <tr>
                            
                            <th colspan="3">
                                <input st-search="" placeholder="Search Documents" class="input-sm form-control" type="search" />
                            </th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat="row in GridDisplayCollection">
                            <td class="hidden">{{row.DocMetaID}}</td>
                            <td class="hidden">{{row.DocPropertyID}}</td>
                            <td>{{row.DocPropertyName}}</td>
                            <td>{{row.IdentificationAttribute}}</td>
                            <td class="text-center"><edit-in-place value="row.MetaValue"></edit-in-place></td>
                            <td class="text-center"><edit-in-place value="row.Remarks"></edit-in-place></td>
                            <td class="text-center">
                                <span ng-attr-class="{{row.IsRequired== '1'? 'label label-danger' : 'label label-success' }}">
                                    {{row.IsRequired== '1' ? 'Required' : 'Optional' }}
                                </span>
                            </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="6" class="text-center">
                                <div st-pagination="" st-items-by-page="itemsByPage" st-displayed-pages="10"></div>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
           
        </div>

     
        <div class="row">
            <div class="col-lg-12">
                <label>Process Documents: </label>

                <button class="btn btnc1 btn-app btn-flat btnScan" ng-click="AcquireImage();">
                    <i class="fa fa-print"></i> Scan
                </button>
                <a class="btn btnc2 btn-app btn-flat btnLoad" ng-click="LoadImage()">
                    <i class="fa fa-inbox"></i> Load
                </a>
            
                <a class="btn btnc3 btn-app btn-flat btnRemove" ng-click="RemoveAllSelectedImages()">
                    <i class="fa fa-remove"></i> Remove
                </a>
                <a class="btn btnc2 btn-app btn-flat btnRotate" ng-click="RotateRight()">
                    <i class="fa fa-rotate-right"></i> Rotate
                </a>

                <a class="btn btnc2 btn-app btn-flat btnMoveImage" ng-click="ShowMoveImageDiv()">
                    <i class="fa fa-reorder"></i> Move Image
                </a>
            </div>
        </div>
        <br/>
        <div class="row">
            <div id="MoveImage" class="row hidden">
                <div class="col-lg-2"></div>
                <div class="col-lg-10">
                    <label>Which Image</label><input type="text" id="WhichImage" />
                    <label>Where</label><input type="text" id="Where" />
                    <button class="btn btn-primary btn-flat btn-sm" ng-click="MoveImage()">Move</button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div id="dwtHorizontalThumbnil"></div>
            </div>
        </div>

    </div>
    <div class="box-footer with-border">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <button type="button" id="btnSave" class="btn btn-lg btn-primary btn-flat pull-right btnSave" data-ng-click="ShowConfirmModal()"><i class="fa fa-save"></i>  Save</button>
            </div>
        </div>
    </div>


<div id="viewerModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                <h3 class="modal-title">Image Viewer</h3>
            </div>

            <div class="modal-body">
                <div class="box-body">
                    <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomIn()"> Zoom In</button>
                    <button class="btn btn-flat btn-sm btn-default" data-ng-click="ZoomOut()"> Zoom Out</button>

                    <div id="dwtLargeViewer" class="box-body"></div>
                </div>
            </div>

            <div class="modal-footer">
                <div class="col-sm-12 col-md-12 col-lg-12">
                    <div class="form-group">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="mydiv" data-ng-show="loading">
    <div class="overlay">
        <div class="loder">
            <img src="~/Content/AdminLTE/img/cube.gif"/> <span class="text-bold">Loading...</span>
        </div>
    </div>
</div>

    <div id="ConfirmSave" class="modal fade">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title">Are You Sure?</h3>
                </div>
                <div class="modal-body">
                    <div class="box-body">
                        <div class="form-group">
                            <h4>You Want to Upload the Documents?</h4>
                        </div>
                    </div><!-- /.box-body -->
                </div>
                <div class="modal-footer">
                    <button type="button" id="yes" class="btn btn-danger" ng-disabled="loading" data-ng-click="SaveImage()">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

</div>


<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.intellisense.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.initiate.js"></script>
<script type="text/javascript" src="~/Resources/dynamsoft.webtwain.config.js"></script>

<script type="text/javascript">

    app.controller('OwnerProperIdentityCtrl', function ($scope, $http) {
        applySecurity();
        Dynamsoft.WebTwainEnv.RegisterEvent('OnWebTwainReady', Dynamsoft_OnReady);

        var DWObject;
        var DWObjectLargeViewer;
        var zoomFactor = .5;
        
        function Dynamsoft_OnReady() {
            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain('dwtHorizontalThumbnil');
            
            DWObjectLargeViewer = Dynamsoft.WebTwainEnv.GetWebTwain('dwtLargeViewer');

            DWObjectLargeViewer.SetViewMode(-1, -1);
            DWObjectLargeViewer.MaxImagesInBuffer = 1;

            DWObject.SetViewMode(4, -1);
            DWObject.PDFCompressionType = EnumDWT_PDFCompressionType.PDF_JPEG;
            DWObject.JPEGQuality = 20;
            DWObject.FitWindowType = 0;
            DWObject.SelectionImageBorderColor = 0x691254;
            DWObject.ShowPageNumber = true;
            DWObject.IfAppendImage = true;
            DWObject.RegisterEvent('OnMouseDoubleClick', $scope.updateLargeViewer);
            DWObject.RegisterEvent('OnImageAreaSelected', function(sImageIndex, left, top, right, bottom) {
                DWObject.Erase(sImageIndex, left, top, right, bottom);
            });
        };


        $scope.AcquireImage = function() {
            if (DWObject) {
                DWObject.IfAutomaticDeskew = true;
                DWObject.IfAutoDiscardBlankpages = false;
                DWObject.AcquireImage();
            }
        };

        $scope.ZoomIn = function () {
            DWObjectLargeViewer.Zoom = zoomFactor * 1.2;
            zoomFactor = zoomFactor * 1.2;
        };

        $scope.ZoomOut = function () {
            DWObjectLargeViewer.Zoom = zoomFactor / 1.2;
            zoomFactor = zoomFactor / 1.2;
        };

        $scope.SaveImage = function () {
            $('#ConfirmSave').modal('hide');
            $scope.loading = true;

            var selectedPropID = new Array();
            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                if (item.IsSelected) {
                    selectedPropID.push(item.DocPropertyID);
                };
            });

            var DocIDsCounter = 0;

            $http.post('/DocScanningModule/MultiDocScan/AddDocumentInfo',
                {
                    _modelDocumentsInfo: $scope.docPropIdentityModel,
                    _SelectedPropID: selectedPropID.join(),
                    _docMetaValues: $scope.docPropIdentityGridData
                })
                .success(function (response) {
                    var uploadStatus = 0;
                    for (var i = 0; i <= DWObject.HowManyImagesInBuffer - 1; i++) {
                        
                        if (DWObject.IsBlankImageExpress(i)) {
                            DWObject.IfShowFileDialog = false;
                            
                            var strFTPServer = response.result[0].ServerIP;
                            DWObject.FTPPort = response.result[0].ServerPort;
                            DWObject.FTPUserName = response.result[0].FtpUserName;
                            DWObject.FTPPassword = response.result[0].FtpPassword;

                            var isSave = DWObject.FTPUploadAsMultiPagePDF(strFTPServer,
                                response.DistinctID[DocIDsCounter].FileServerUrl + "//" +
                                response.DistinctID[DocIDsCounter].DocumentID + ".pdf");
                            
                            
                            if (isSave) {
                                DocIDsCounter++;
                                DWObject.RemoveAllSelectedImages();
                                DWObject.RemoveImage(0);
                                i = -1;
                                uploadStatus = 1;
                            } else {
                                break;
                            }

                        } else {
                            DWObject.SelectedImagesCount = i+1;
                            DWObject.SetSelectedImageIndex(i, i);
                        }
                    };
                    if (uploadStatus === 1) {
                        $scope.docPropIdentityGridData = response.result;
                        $scope.loading = false;
                        
                        toastr.success("Upload Successful");
                        $scope.BindDataToGrid();
                        //$scope.ResetModel();
                    } else {
                        $scope.loading = false;

                        var savedDocID = new Array();
                        angular.forEach(response.DistinctID, function(item) {

                            savedDocID.push(item.DocumentID);

                        });

                        $http.post('/DocScanningModule/MultiDocScan/DeleteDocumentInfo',
                                    {
                                        _DocumentIDs: savedDocID.join()
                                    })
                                    .success(function (response) {
                                        $scope.loading = false;
                                        toastr.success("Upload Failed");
                                    })
                                    .error(function () {
                                        $scope.loading = false;
                                    });
                    }

                })
                .error(function () {
                    $scope.loading = false;
                    toastr.success("Failed to Save Meta Data.");
                });
        };

        $scope.LoadImage = function () {
            DWObject.IfShowFileDialog = true;

            DWObject.RemoveAllImages();
            DWObject.LoadImageEx("", EnumDWT_ImageType.IT_ALL);
        };
        

        $scope.RemoveAllSelectedImages = function () {
            DWObject.RemoveAllSelectedImages();
        }

        $scope.RotateRight = function () {
            DWObject.RotateRight(DWObject.GetSelectedImageIndex(0));
        }

        $scope.ShowMoveImageDiv = function () {
            $("#MoveImage").toggleClass("hidden");
        }
        $scope.MoveImage = function () {
            DWObject.MoveImage(($("#WhichImage").val() - 1), ($("#Where").val() - 1));
            $("#MoveImage").toggleClass("hidden");
        };

        $scope.updateLargeViewer = function () {
            DWObject.CopyToClipboard(DWObject.CurrentImageIndexInBuffer);
            DWObjectLargeViewer.LoadDibFromClipboard();
            $('#viewerModal').modal('show');
        };


        $scope.docPropIdentityModel = {
            OwnerLevel: { OwnerLevelID: "", LevelName: "" },
            Owner: { OwnerID: "", OwnerName: "" },
            DocCategory: { DocCategoryID: "", DocCategoryName: "" },
            DocType: { DocTypeID: "", DocTypeName: "" },
            DocProperty: { DocPropertyID: "", DocPropertyName: "" },
            DocMetaID: {},
            DocPropIdentifyID: {},
            MetaValue: {},
            Remarks: {}
        };

        $scope.SelectAll = function () {

            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                item.IsSelected = true;
            });

            $scope.BindDataToGrid();
        };

        $scope.UnSelectAll = function () {

            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                item.IsSelected = false;
            });
            $scope.BindDataToGrid();


        };
        

        $scope.itemsByPage = 10;
        $scope.loading = true;

        
        $http.get('/DocScanningModule/OwnerProperIdentity/GetOwnerLevel?_OwnerLevelID=')
            .success(function (response) {
                $scope.ownerLevels = response.result;
                $scope.docPropIdentityModel.OwnerLevel = "";
                $scope.loading = false;
            })
            .error(function () {
                $scope.loading = false;
            });

        
        $scope.$watch('docPropIdentityModel.OwnerLevel', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.Owner = "";
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];
                $http.post('/DocScanningModule/OwnerProperIdentity/GetOwnerForSpecificOwnerLevel',
                    { _OwnerLevelID: $scope.docPropIdentityModel.OwnerLevel.OwnerLevelID })
                    .success(function (response) {
                        $scope.ownersForSpecificOwnerLevel = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        
        $scope.$watch('docPropIdentityModel.Owner', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocCategory = "";
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentCategoriesForSpecificOwner',
                    { _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID })
                    .success(function (response) {
                        $scope.docCategoriesForSpecificOwner = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        
        $scope.$watch('docPropIdentityModel.DocCategory', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocType = "";
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];
                $http.post('/DocScanningModule/OwnerProperIdentity/GetDocumentTypeForSpecificDocCategory',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID
                    })
                    .success(function (response) {
                        $scope.docTypeForSpecificDocCategory = response.result;
                        $scope.loading = false;
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });


        
        $scope.$watch('docPropIdentityModel.DocType', function (newVal) {
            if (newVal) {
                $scope.docPropIdentityModel.DocProperty = "";
                $scope.docPropertyForSpecificDocType = "";
                $scope.docPropIdentityGridData = [];
                //$scope.docPropIdentityGridData = [];
                $http.post('/DocScanningModule/MultiDocScan/GetDocumentProperty',
                    {
                        _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                        _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                        _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID
                    })
                    .success(function (response) {
                        $scope.docPropertyForSpecificDocType = response.result;
                        $scope.loading = false;
                        $scope.BindDataToGrid();
                    }).error(function () {
                        $scope.loading = false;
                    });
            }
        });

        $scope.BindDataToGrid = function () {
            var selectedPropID = new Array();
            angular.forEach($scope.docPropertyForSpecificDocType, function (item) {
                if (item.IsSelected) {
                    selectedPropID.push(item.DocPropertyID);
                };
            });
            
            $http.post('/DocScanningModule/MultiDocScan/GetDocPropIdentityForSelectedDocTypes',
                {
                    _DocCategoryID: $scope.docPropIdentityModel.DocCategory.DocCategoryID,
                    _OwnerID: $scope.docPropIdentityModel.Owner.OwnerID,
                    _DocTypeID: $scope.docPropIdentityModel.DocType.DocTypeID,
                    _SelectedPropID: selectedPropID.join()
                })
                .success(function (response) {
                    $scope.docPropIdentityGridData = response.result;
                    $scope.GridDisplayCollection = response.result;
                    $scope.loading = false;
                }).error(function () {
                    $scope.loading = false;
                });
            
        };

        $scope.ResetModel = function () {
            $scope.docPropIdentityModel.OwnerLevel = "";
            $scope.docPropIdentityModel.Owner = "";
            $scope.docPropIdentityModel.DocCategory = "";
            $scope.docPropIdentityModel.DocType = "";
            $scope.docPropIdentityModel.DocProperty = "";
            $scope.docPropertyForSpecificDocType = "";
            $scope.docPropIdentityGridData = [];
        };

        $scope.toggleRefreshTable = function (row) {
            $scope.loading = true;
            $scope.BindDataToGrid();
            $scope.loading = false;
        };

        $scope.ShowConfirmModal = function () {

            $('#ConfirmSave').modal('show');
        };

    });

    app.directive('editInPlace', function () {
        return {
            restrict: 'E',
            scope: { value: '=' },
            template: '<input ng-model="value"></input>',
            link: function ($scope, element, attrs) {
                // Let's get a reference to the input element, as we'll want to reference it.
                var inputElement = angular.element(element.children()[1]);

                // This directive should have a set class so we can style it.
                element.addClass('edit-in-place');

                // Initially, we're not editing.
                $scope.editing = false;

                // ng-click handler to activate edit-in-place
                $scope.edit = function () {
                    $scope.editing = true;

                    // We control display through a class on the directive itself. See the CSS.
                    element.addClass('active');

                    // And we must focus the element. 
                    // `angular.element()` provides a chainable array, like jQuery so to access a native DOM function, 
                    // we have to reference the first element in the array.
                    inputElement[0].focus();
                };

                // When we leave the input, we're done editing.
                inputElement.prop('onblur', function () {
                    $scope.editing = false;
                    element.removeClass('active');
                });
            }
        };
    });

</script>



